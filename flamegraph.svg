<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="32081"><g><title>__sigtramp (10 samples, 0.03%)</title><rect x="0.0000%" y="309" width="0.0312%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="319.50"></text></g><g><title>_perf_signal_handler (10 samples, 0.03%)</title><rect x="0.0000%" y="293" width="0.0312%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="10"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.18%)</title><rect x="0.0405%" y="213" width="0.1777%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="57"/><text x="0.2905%" y="223.50"></text></g><g><title>__sigtramp (57 samples, 0.18%)</title><rect x="0.0405%" y="197" width="0.1777%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="57"/><text x="0.2905%" y="207.50"></text></g><g><title>_perf_signal_handler (57 samples, 0.18%)</title><rect x="0.0405%" y="181" width="0.1777%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="57"/><text x="0.2905%" y="191.50"></text></g><g><title>__sigtramp (4 samples, 0.01%)</title><rect x="0.2182%" y="213" width="0.0125%" height="15" fill="rgb(232,128,0)" fg:x="70" fg:w="4"/><text x="0.4682%" y="223.50"></text></g><g><title>_perf_signal_handler (4 samples, 0.01%)</title><rect x="0.2182%" y="197" width="0.0125%" height="15" fill="rgb(207,160,47)" fg:x="70" fg:w="4"/><text x="0.4682%" y="207.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (16 samples, 0.05%)</title><rect x="0.2307%" y="213" width="0.0499%" height="15" fill="rgb(228,23,34)" fg:x="74" fg:w="16"/><text x="0.4807%" y="223.50"></text></g><g><title>__sigtramp (16 samples, 0.05%)</title><rect x="0.2307%" y="197" width="0.0499%" height="15" fill="rgb(218,30,26)" fg:x="74" fg:w="16"/><text x="0.4807%" y="207.50"></text></g><g><title>_perf_signal_handler (16 samples, 0.05%)</title><rect x="0.2307%" y="181" width="0.0499%" height="15" fill="rgb(220,122,19)" fg:x="74" fg:w="16"/><text x="0.4807%" y="191.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (5 samples, 0.02%)</title><rect x="0.2805%" y="213" width="0.0156%" height="15" fill="rgb(250,228,42)" fg:x="90" fg:w="5"/><text x="0.5305%" y="223.50"></text></g><g><title>__sigtramp (5 samples, 0.02%)</title><rect x="0.2805%" y="197" width="0.0156%" height="15" fill="rgb(240,193,28)" fg:x="90" fg:w="5"/><text x="0.5305%" y="207.50"></text></g><g><title>_perf_signal_handler (5 samples, 0.02%)</title><rect x="0.2805%" y="181" width="0.0156%" height="15" fill="rgb(216,20,37)" fg:x="90" fg:w="5"/><text x="0.5305%" y="191.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.24%)</title><rect x="0.2961%" y="197" width="0.2400%" height="15" fill="rgb(206,188,39)" fg:x="95" fg:w="77"/><text x="0.5461%" y="207.50"></text></g><g><title>__sigtramp (77 samples, 0.24%)</title><rect x="0.2961%" y="181" width="0.2400%" height="15" fill="rgb(217,207,13)" fg:x="95" fg:w="77"/><text x="0.5461%" y="191.50"></text></g><g><title>_perf_signal_handler (77 samples, 0.24%)</title><rect x="0.2961%" y="165" width="0.2400%" height="15" fill="rgb(231,73,38)" fg:x="95" fg:w="77"/><text x="0.5461%" y="175.50"></text></g><g><title>__sigtramp (11 samples, 0.03%)</title><rect x="0.5361%" y="197" width="0.0343%" height="15" fill="rgb(225,20,46)" fg:x="172" fg:w="11"/><text x="0.7861%" y="207.50"></text></g><g><title>_perf_signal_handler (11 samples, 0.03%)</title><rect x="0.5361%" y="181" width="0.0343%" height="15" fill="rgb(210,31,41)" fg:x="172" fg:w="11"/><text x="0.7861%" y="191.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (31 samples, 0.10%)</title><rect x="0.5704%" y="197" width="0.0966%" height="15" fill="rgb(221,200,47)" fg:x="183" fg:w="31"/><text x="0.8204%" y="207.50"></text></g><g><title>__sigtramp (31 samples, 0.10%)</title><rect x="0.5704%" y="181" width="0.0966%" height="15" fill="rgb(226,26,5)" fg:x="183" fg:w="31"/><text x="0.8204%" y="191.50"></text></g><g><title>_perf_signal_handler (31 samples, 0.10%)</title><rect x="0.5704%" y="165" width="0.0966%" height="15" fill="rgb(249,33,26)" fg:x="183" fg:w="31"/><text x="0.8204%" y="175.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (10 samples, 0.03%)</title><rect x="0.6702%" y="197" width="0.0312%" height="15" fill="rgb(235,183,28)" fg:x="215" fg:w="10"/><text x="0.9202%" y="207.50"></text></g><g><title>__sigtramp (10 samples, 0.03%)</title><rect x="0.6702%" y="181" width="0.0312%" height="15" fill="rgb(221,5,38)" fg:x="215" fg:w="10"/><text x="0.9202%" y="191.50"></text></g><g><title>_perf_signal_handler (10 samples, 0.03%)</title><rect x="0.6702%" y="165" width="0.0312%" height="15" fill="rgb(247,18,42)" fg:x="215" fg:w="10"/><text x="0.9202%" y="175.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.40%)</title><rect x="0.7013%" y="181" width="0.3990%" height="15" fill="rgb(241,131,45)" fg:x="225" fg:w="128"/><text x="0.9513%" y="191.50"></text></g><g><title>__sigtramp (128 samples, 0.40%)</title><rect x="0.7013%" y="165" width="0.3990%" height="15" fill="rgb(249,31,29)" fg:x="225" fg:w="128"/><text x="0.9513%" y="175.50"></text></g><g><title>_perf_signal_handler (128 samples, 0.40%)</title><rect x="0.7013%" y="149" width="0.3990%" height="15" fill="rgb(225,111,53)" fg:x="225" fg:w="128"/><text x="0.9513%" y="159.50"></text></g><g><title>__sigtramp (17 samples, 0.05%)</title><rect x="1.1003%" y="181" width="0.0530%" height="15" fill="rgb(238,160,17)" fg:x="353" fg:w="17"/><text x="1.3503%" y="191.50"></text></g><g><title>_perf_signal_handler (17 samples, 0.05%)</title><rect x="1.1003%" y="165" width="0.0530%" height="15" fill="rgb(214,148,48)" fg:x="353" fg:w="17"/><text x="1.3503%" y="175.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (60 samples, 0.19%)</title><rect x="1.1533%" y="181" width="0.1870%" height="15" fill="rgb(232,36,49)" fg:x="370" fg:w="60"/><text x="1.4033%" y="191.50"></text></g><g><title>__sigtramp (60 samples, 0.19%)</title><rect x="1.1533%" y="165" width="0.1870%" height="15" fill="rgb(209,103,24)" fg:x="370" fg:w="60"/><text x="1.4033%" y="175.50"></text></g><g><title>_perf_signal_handler (60 samples, 0.19%)</title><rect x="1.1533%" y="149" width="0.1870%" height="15" fill="rgb(229,88,8)" fg:x="370" fg:w="60"/><text x="1.4033%" y="159.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (13 samples, 0.04%)</title><rect x="1.3435%" y="181" width="0.0405%" height="15" fill="rgb(213,181,19)" fg:x="431" fg:w="13"/><text x="1.5935%" y="191.50"></text></g><g><title>__sigtramp (13 samples, 0.04%)</title><rect x="1.3435%" y="165" width="0.0405%" height="15" fill="rgb(254,191,54)" fg:x="431" fg:w="13"/><text x="1.5935%" y="175.50"></text></g><g><title>_perf_signal_handler (13 samples, 0.04%)</title><rect x="1.3435%" y="149" width="0.0405%" height="15" fill="rgb(241,83,37)" fg:x="431" fg:w="13"/><text x="1.5935%" y="159.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (221 samples, 0.69%)</title><rect x="1.3840%" y="165" width="0.6889%" height="15" fill="rgb(233,36,39)" fg:x="444" fg:w="221"/><text x="1.6340%" y="175.50"></text></g><g><title>__sigtramp (221 samples, 0.69%)</title><rect x="1.3840%" y="149" width="0.6889%" height="15" fill="rgb(226,3,54)" fg:x="444" fg:w="221"/><text x="1.6340%" y="159.50"></text></g><g><title>_perf_signal_handler (221 samples, 0.69%)</title><rect x="1.3840%" y="133" width="0.6889%" height="15" fill="rgb(245,192,40)" fg:x="444" fg:w="221"/><text x="1.6340%" y="143.50"></text></g><g><title>__sigtramp (32 samples, 0.10%)</title><rect x="2.0729%" y="165" width="0.0997%" height="15" fill="rgb(238,167,29)" fg:x="665" fg:w="32"/><text x="2.3229%" y="175.50"></text></g><g><title>_perf_signal_handler (32 samples, 0.10%)</title><rect x="2.0729%" y="149" width="0.0997%" height="15" fill="rgb(232,182,51)" fg:x="665" fg:w="32"/><text x="2.3229%" y="159.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (90 samples, 0.28%)</title><rect x="2.1726%" y="165" width="0.2805%" height="15" fill="rgb(231,60,39)" fg:x="697" fg:w="90"/><text x="2.4226%" y="175.50"></text></g><g><title>__sigtramp (90 samples, 0.28%)</title><rect x="2.1726%" y="149" width="0.2805%" height="15" fill="rgb(208,69,12)" fg:x="697" fg:w="90"/><text x="2.4226%" y="159.50"></text></g><g><title>_perf_signal_handler (90 samples, 0.28%)</title><rect x="2.1726%" y="133" width="0.2805%" height="15" fill="rgb(235,93,37)" fg:x="697" fg:w="90"/><text x="2.4226%" y="143.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (18 samples, 0.06%)</title><rect x="2.4563%" y="165" width="0.0561%" height="15" fill="rgb(213,116,39)" fg:x="788" fg:w="18"/><text x="2.7063%" y="175.50"></text></g><g><title>__sigtramp (18 samples, 0.06%)</title><rect x="2.4563%" y="149" width="0.0561%" height="15" fill="rgb(222,207,29)" fg:x="788" fg:w="18"/><text x="2.7063%" y="159.50"></text></g><g><title>_perf_signal_handler (18 samples, 0.06%)</title><rect x="2.4563%" y="133" width="0.0561%" height="15" fill="rgb(206,96,30)" fg:x="788" fg:w="18"/><text x="2.7063%" y="143.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (338 samples, 1.05%)</title><rect x="2.5124%" y="149" width="1.0536%" height="15" fill="rgb(218,138,4)" fg:x="806" fg:w="338"/><text x="2.7624%" y="159.50"></text></g><g><title>__sigtramp (338 samples, 1.05%)</title><rect x="2.5124%" y="133" width="1.0536%" height="15" fill="rgb(250,191,14)" fg:x="806" fg:w="338"/><text x="2.7624%" y="143.50"></text></g><g><title>_perf_signal_handler (338 samples, 1.05%)</title><rect x="2.5124%" y="117" width="1.0536%" height="15" fill="rgb(239,60,40)" fg:x="806" fg:w="338"/><text x="2.7624%" y="127.50"></text></g><g><title>__sigtramp (43 samples, 0.13%)</title><rect x="3.5660%" y="149" width="0.1340%" height="15" fill="rgb(206,27,48)" fg:x="1144" fg:w="43"/><text x="3.8160%" y="159.50"></text></g><g><title>_perf_signal_handler (43 samples, 0.13%)</title><rect x="3.5660%" y="133" width="0.1340%" height="15" fill="rgb(225,35,8)" fg:x="1144" fg:w="43"/><text x="3.8160%" y="143.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (175 samples, 0.55%)</title><rect x="3.7000%" y="149" width="0.5455%" height="15" fill="rgb(250,213,24)" fg:x="1187" fg:w="175"/><text x="3.9500%" y="159.50"></text></g><g><title>__sigtramp (175 samples, 0.55%)</title><rect x="3.7000%" y="133" width="0.5455%" height="15" fill="rgb(247,123,22)" fg:x="1187" fg:w="175"/><text x="3.9500%" y="143.50"></text></g><g><title>_perf_signal_handler (175 samples, 0.55%)</title><rect x="3.7000%" y="117" width="0.5455%" height="15" fill="rgb(231,138,38)" fg:x="1187" fg:w="175"/><text x="3.9500%" y="127.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::each_move (4 samples, 0.01%)</title><rect x="4.2455%" y="149" width="0.0125%" height="15" fill="rgb(231,145,46)" fg:x="1362" fg:w="4"/><text x="4.4955%" y="159.50"></text></g><g><title>__sigtramp (4 samples, 0.01%)</title><rect x="4.2455%" y="133" width="0.0125%" height="15" fill="rgb(251,118,11)" fg:x="1362" fg:w="4"/><text x="4.4955%" y="143.50"></text></g><g><title>_perf_signal_handler (4 samples, 0.01%)</title><rect x="4.2455%" y="117" width="0.0125%" height="15" fill="rgb(217,147,25)" fg:x="1362" fg:w="4"/><text x="4.4955%" y="127.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (44 samples, 0.14%)</title><rect x="4.2580%" y="149" width="0.1372%" height="15" fill="rgb(247,81,37)" fg:x="1366" fg:w="44"/><text x="4.5080%" y="159.50"></text></g><g><title>__sigtramp (44 samples, 0.14%)</title><rect x="4.2580%" y="133" width="0.1372%" height="15" fill="rgb(209,12,38)" fg:x="1366" fg:w="44"/><text x="4.5080%" y="143.50"></text></g><g><title>_perf_signal_handler (44 samples, 0.14%)</title><rect x="4.2580%" y="117" width="0.1372%" height="15" fill="rgb(227,1,9)" fg:x="1366" fg:w="44"/><text x="4.5080%" y="127.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (485 samples, 1.51%)</title><rect x="4.3951%" y="133" width="1.5118%" height="15" fill="rgb(248,47,43)" fg:x="1410" fg:w="485"/><text x="4.6451%" y="143.50"></text></g><g><title>__sigtramp (485 samples, 1.51%)</title><rect x="4.3951%" y="117" width="1.5118%" height="15" fill="rgb(221,10,30)" fg:x="1410" fg:w="485"/><text x="4.6451%" y="127.50"></text></g><g><title>_perf_signal_handler (485 samples, 1.51%)</title><rect x="4.3951%" y="101" width="1.5118%" height="15" fill="rgb(210,229,1)" fg:x="1410" fg:w="485"/><text x="4.6451%" y="111.50"></text></g><g><title>__sigtramp (71 samples, 0.22%)</title><rect x="5.9069%" y="133" width="0.2213%" height="15" fill="rgb(222,148,37)" fg:x="1895" fg:w="71"/><text x="6.1569%" y="143.50"></text></g><g><title>_perf_signal_handler (71 samples, 0.22%)</title><rect x="5.9069%" y="117" width="0.2213%" height="15" fill="rgb(234,67,33)" fg:x="1895" fg:w="71"/><text x="6.1569%" y="127.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (280 samples, 0.87%)</title><rect x="6.1282%" y="133" width="0.8728%" height="15" fill="rgb(247,98,35)" fg:x="1966" fg:w="280"/><text x="6.3782%" y="143.50"></text></g><g><title>__sigtramp (280 samples, 0.87%)</title><rect x="6.1282%" y="117" width="0.8728%" height="15" fill="rgb(247,138,52)" fg:x="1966" fg:w="280"/><text x="6.3782%" y="127.50"></text></g><g><title>_perf_signal_handler (280 samples, 0.87%)</title><rect x="6.1282%" y="101" width="0.8728%" height="15" fill="rgb(213,79,30)" fg:x="1966" fg:w="280"/><text x="6.3782%" y="111.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::each_move (10 samples, 0.03%)</title><rect x="7.0010%" y="133" width="0.0312%" height="15" fill="rgb(246,177,23)" fg:x="2246" fg:w="10"/><text x="7.2510%" y="143.50"></text></g><g><title>__sigtramp (10 samples, 0.03%)</title><rect x="7.0010%" y="117" width="0.0312%" height="15" fill="rgb(230,62,27)" fg:x="2246" fg:w="10"/><text x="7.2510%" y="127.50"></text></g><g><title>_perf_signal_handler (10 samples, 0.03%)</title><rect x="7.0010%" y="101" width="0.0312%" height="15" fill="rgb(216,154,8)" fg:x="2246" fg:w="10"/><text x="7.2510%" y="111.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (50 samples, 0.16%)</title><rect x="7.0322%" y="133" width="0.1559%" height="15" fill="rgb(244,35,45)" fg:x="2256" fg:w="50"/><text x="7.2822%" y="143.50"></text></g><g><title>__sigtramp (50 samples, 0.16%)</title><rect x="7.0322%" y="117" width="0.1559%" height="15" fill="rgb(251,115,12)" fg:x="2256" fg:w="50"/><text x="7.2822%" y="127.50"></text></g><g><title>_perf_signal_handler (50 samples, 0.16%)</title><rect x="7.0322%" y="101" width="0.1559%" height="15" fill="rgb(240,54,50)" fg:x="2256" fg:w="50"/><text x="7.2822%" y="111.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (638 samples, 1.99%)</title><rect x="7.1881%" y="117" width="1.9887%" height="15" fill="rgb(233,84,52)" fg:x="2306" fg:w="638"/><text x="7.4381%" y="127.50">&lt;..</text></g><g><title>__sigtramp (638 samples, 1.99%)</title><rect x="7.1881%" y="101" width="1.9887%" height="15" fill="rgb(207,117,47)" fg:x="2306" fg:w="638"/><text x="7.4381%" y="111.50">_..</text></g><g><title>_perf_signal_handler (638 samples, 1.99%)</title><rect x="7.1881%" y="85" width="1.9887%" height="15" fill="rgb(249,43,39)" fg:x="2306" fg:w="638"/><text x="7.4381%" y="95.50">_..</text></g><g><title>__sigtramp (115 samples, 0.36%)</title><rect x="9.1768%" y="117" width="0.3585%" height="15" fill="rgb(209,38,44)" fg:x="2944" fg:w="115"/><text x="9.4268%" y="127.50"></text></g><g><title>_perf_signal_handler (115 samples, 0.36%)</title><rect x="9.1768%" y="101" width="0.3585%" height="15" fill="rgb(236,212,23)" fg:x="2944" fg:w="115"/><text x="9.4268%" y="111.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (299 samples, 0.93%)</title><rect x="9.5352%" y="117" width="0.9320%" height="15" fill="rgb(242,79,21)" fg:x="3059" fg:w="299"/><text x="9.7852%" y="127.50"></text></g><g><title>__sigtramp (299 samples, 0.93%)</title><rect x="9.5352%" y="101" width="0.9320%" height="15" fill="rgb(211,96,35)" fg:x="3059" fg:w="299"/><text x="9.7852%" y="111.50"></text></g><g><title>_perf_signal_handler (299 samples, 0.93%)</title><rect x="9.5352%" y="85" width="0.9320%" height="15" fill="rgb(253,215,40)" fg:x="3059" fg:w="299"/><text x="9.7852%" y="95.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::each_move (7 samples, 0.02%)</title><rect x="10.4673%" y="117" width="0.0218%" height="15" fill="rgb(211,81,21)" fg:x="3358" fg:w="7"/><text x="10.7173%" y="127.50"></text></g><g><title>__sigtramp (7 samples, 0.02%)</title><rect x="10.4673%" y="101" width="0.0218%" height="15" fill="rgb(208,190,38)" fg:x="3358" fg:w="7"/><text x="10.7173%" y="111.50"></text></g><g><title>_perf_signal_handler (7 samples, 0.02%)</title><rect x="10.4673%" y="85" width="0.0218%" height="15" fill="rgb(235,213,38)" fg:x="3358" fg:w="7"/><text x="10.7173%" y="95.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (52 samples, 0.16%)</title><rect x="10.4891%" y="117" width="0.1621%" height="15" fill="rgb(237,122,38)" fg:x="3365" fg:w="52"/><text x="10.7391%" y="127.50"></text></g><g><title>__sigtramp (52 samples, 0.16%)</title><rect x="10.4891%" y="101" width="0.1621%" height="15" fill="rgb(244,218,35)" fg:x="3365" fg:w="52"/><text x="10.7391%" y="111.50"></text></g><g><title>_perf_signal_handler (52 samples, 0.16%)</title><rect x="10.4891%" y="85" width="0.1621%" height="15" fill="rgb(240,68,47)" fg:x="3365" fg:w="52"/><text x="10.7391%" y="95.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (764 samples, 2.38%)</title><rect x="10.6512%" y="101" width="2.3815%" height="15" fill="rgb(210,16,53)" fg:x="3417" fg:w="764"/><text x="10.9012%" y="111.50">&lt;o..</text></g><g><title>__sigtramp (764 samples, 2.38%)</title><rect x="10.6512%" y="85" width="2.3815%" height="15" fill="rgb(235,124,12)" fg:x="3417" fg:w="764"/><text x="10.9012%" y="95.50">__..</text></g><g><title>_perf_signal_handler (764 samples, 2.38%)</title><rect x="10.6512%" y="69" width="2.3815%" height="15" fill="rgb(224,169,11)" fg:x="3417" fg:w="764"/><text x="10.9012%" y="79.50">_p..</text></g><g><title>__sigtramp (101 samples, 0.31%)</title><rect x="13.0326%" y="101" width="0.3148%" height="15" fill="rgb(250,166,2)" fg:x="4181" fg:w="101"/><text x="13.2826%" y="111.50"></text></g><g><title>_perf_signal_handler (101 samples, 0.31%)</title><rect x="13.0326%" y="85" width="0.3148%" height="15" fill="rgb(242,216,29)" fg:x="4181" fg:w="101"/><text x="13.2826%" y="95.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (370 samples, 1.15%)</title><rect x="13.3475%" y="101" width="1.1533%" height="15" fill="rgb(230,116,27)" fg:x="4282" fg:w="370"/><text x="13.5975%" y="111.50"></text></g><g><title>__sigtramp (370 samples, 1.15%)</title><rect x="13.3475%" y="85" width="1.1533%" height="15" fill="rgb(228,99,48)" fg:x="4282" fg:w="370"/><text x="13.5975%" y="95.50"></text></g><g><title>_perf_signal_handler (370 samples, 1.15%)</title><rect x="13.3475%" y="69" width="1.1533%" height="15" fill="rgb(253,11,6)" fg:x="4282" fg:w="370"/><text x="13.5975%" y="79.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::each_move (15 samples, 0.05%)</title><rect x="14.5008%" y="101" width="0.0468%" height="15" fill="rgb(247,143,39)" fg:x="4652" fg:w="15"/><text x="14.7508%" y="111.50"></text></g><g><title>__sigtramp (15 samples, 0.05%)</title><rect x="14.5008%" y="85" width="0.0468%" height="15" fill="rgb(236,97,10)" fg:x="4652" fg:w="15"/><text x="14.7508%" y="95.50"></text></g><g><title>_perf_signal_handler (15 samples, 0.05%)</title><rect x="14.5008%" y="69" width="0.0468%" height="15" fill="rgb(233,208,19)" fg:x="4652" fg:w="15"/><text x="14.7508%" y="79.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (61 samples, 0.19%)</title><rect x="14.5476%" y="101" width="0.1901%" height="15" fill="rgb(216,164,2)" fg:x="4667" fg:w="61"/><text x="14.7976%" y="111.50"></text></g><g><title>__sigtramp (61 samples, 0.19%)</title><rect x="14.5476%" y="85" width="0.1901%" height="15" fill="rgb(220,129,5)" fg:x="4667" fg:w="61"/><text x="14.7976%" y="95.50"></text></g><g><title>_perf_signal_handler (61 samples, 0.19%)</title><rect x="14.5476%" y="69" width="0.1901%" height="15" fill="rgb(242,17,10)" fg:x="4667" fg:w="61"/><text x="14.7976%" y="79.50"></text></g><g><title>onoro_rs::find_best_move (4,729 samples, 14.74%)</title><rect x="0.0405%" y="229" width="14.7408%" height="15" fill="rgb(242,107,0)" fg:x="13" fg:w="4729"/><text x="0.2905%" y="239.50">onoro_rs::find_best_mo..</text></g><g><title>onoro_rs::find_best_move (4,647 samples, 14.49%)</title><rect x="0.2961%" y="213" width="14.4852%" height="15" fill="rgb(251,28,31)" fg:x="95" fg:w="4647"/><text x="0.5461%" y="223.50">onoro_rs::find_best_mo..</text></g><g><title>onoro_rs::find_best_move (4,517 samples, 14.08%)</title><rect x="0.7013%" y="197" width="14.0800%" height="15" fill="rgb(233,223,10)" fg:x="225" fg:w="4517"/><text x="0.9513%" y="207.50">onoro_rs::find_best_m..</text></g><g><title>onoro_rs::find_best_move (4,298 samples, 13.40%)</title><rect x="1.3840%" y="181" width="13.3973%" height="15" fill="rgb(215,21,27)" fg:x="444" fg:w="4298"/><text x="1.6340%" y="191.50">onoro_rs::find_best_..</text></g><g><title>onoro_rs::find_best_move (3,936 samples, 12.27%)</title><rect x="2.5124%" y="165" width="12.2689%" height="15" fill="rgb(232,23,21)" fg:x="806" fg:w="3936"/><text x="2.7624%" y="175.50">onoro_rs::find_bes..</text></g><g><title>onoro_rs::find_best_move (3,332 samples, 10.39%)</title><rect x="4.3951%" y="149" width="10.3862%" height="15" fill="rgb(244,5,23)" fg:x="1410" fg:w="3332"/><text x="4.6451%" y="159.50">onoro_rs::find_..</text></g><g><title>onoro_rs::find_best_move (2,436 samples, 7.59%)</title><rect x="7.1881%" y="133" width="7.5933%" height="15" fill="rgb(226,81,46)" fg:x="2306" fg:w="2436"/><text x="7.4381%" y="143.50">onoro_rs::..</text></g><g><title>onoro_rs::find_best_move (1,325 samples, 4.13%)</title><rect x="10.6512%" y="117" width="4.1302%" height="15" fill="rgb(247,70,30)" fg:x="3417" fg:w="1325"/><text x="10.9012%" y="127.50">onoro..</text></g><g><title>onoro_rs::find_best_move (14 samples, 0.04%)</title><rect x="14.7377%" y="101" width="0.0436%" height="15" fill="rgb(212,68,19)" fg:x="4728" fg:w="14"/><text x="14.9877%" y="111.50"></text></g><g><title>__sigtramp (14 samples, 0.04%)</title><rect x="14.7377%" y="85" width="0.0436%" height="15" fill="rgb(240,187,13)" fg:x="4728" fg:w="14"/><text x="14.9877%" y="95.50"></text></g><g><title>_perf_signal_handler (14 samples, 0.04%)</title><rect x="14.7377%" y="69" width="0.0436%" height="15" fill="rgb(223,113,26)" fg:x="4728" fg:w="14"/><text x="14.9877%" y="79.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="14.7938%" y="133" width="0.0125%" height="15" fill="rgb(206,192,2)" fg:x="4746" fg:w="4"/><text x="15.0438%" y="143.50"></text></g><g><title>__sigtramp (4 samples, 0.01%)</title><rect x="14.7938%" y="117" width="0.0125%" height="15" fill="rgb(241,108,4)" fg:x="4746" fg:w="4"/><text x="15.0438%" y="127.50"></text></g><g><title>_perf_signal_handler (4 samples, 0.01%)</title><rect x="14.7938%" y="101" width="0.0125%" height="15" fill="rgb(247,173,49)" fg:x="4746" fg:w="4"/><text x="15.0438%" y="111.50"></text></g><g><title>__sigtramp (21 samples, 0.07%)</title><rect x="14.8063%" y="117" width="0.0655%" height="15" fill="rgb(224,114,35)" fg:x="4750" fg:w="21"/><text x="15.0563%" y="127.50"></text></g><g><title>_perf_signal_handler (21 samples, 0.07%)</title><rect x="14.8063%" y="101" width="0.0655%" height="15" fill="rgb(245,159,27)" fg:x="4750" fg:w="21"/><text x="15.0563%" y="111.50"></text></g><g><title>&lt;onoro::onoro_view::OnoroView&lt;_,_,_&gt; as core::cmp::PartialEq&gt;::eq (23 samples, 0.07%)</title><rect x="14.8063%" y="133" width="0.0717%" height="15" fill="rgb(245,172,44)" fg:x="4750" fg:w="23"/><text x="15.0563%" y="143.50"></text></g><g><title>__sigtramp (9 samples, 0.03%)</title><rect x="14.8780%" y="133" width="0.0281%" height="15" fill="rgb(236,23,11)" fg:x="4773" fg:w="9"/><text x="15.1280%" y="143.50"></text></g><g><title>_perf_signal_handler (9 samples, 0.03%)</title><rect x="14.8780%" y="117" width="0.0281%" height="15" fill="rgb(205,117,38)" fg:x="4773" fg:w="9"/><text x="15.1280%" y="127.50"></text></g><g><title>onoro::onoro_view::OnoroView&lt;_,_,_&gt;::new (5 samples, 0.02%)</title><rect x="14.9310%" y="133" width="0.0156%" height="15" fill="rgb(237,72,25)" fg:x="4790" fg:w="5"/><text x="15.1810%" y="143.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.15%)</title><rect x="14.9465%" y="117" width="0.1465%" height="15" fill="rgb(244,70,9)" fg:x="4795" fg:w="47"/><text x="15.1965%" y="127.50"></text></g><g><title>__sigtramp (47 samples, 0.15%)</title><rect x="14.9465%" y="101" width="0.1465%" height="15" fill="rgb(217,125,39)" fg:x="4795" fg:w="47"/><text x="15.1965%" y="111.50"></text></g><g><title>_perf_signal_handler (47 samples, 0.15%)</title><rect x="14.9465%" y="85" width="0.1465%" height="15" fill="rgb(235,36,10)" fg:x="4795" fg:w="47"/><text x="15.1965%" y="95.50"></text></g><g><title>__sigtramp (117 samples, 0.36%)</title><rect x="15.0930%" y="101" width="0.3647%" height="15" fill="rgb(251,123,47)" fg:x="4842" fg:w="117"/><text x="15.3430%" y="111.50"></text></g><g><title>_perf_signal_handler (117 samples, 0.36%)</title><rect x="15.0930%" y="85" width="0.3647%" height="15" fill="rgb(221,13,13)" fg:x="4842" fg:w="117"/><text x="15.3430%" y="95.50"></text></g><g><title>&lt;onoro::onoro_view::OnoroView&lt;_,_,_&gt; as core::cmp::PartialEq&gt;::eq (144 samples, 0.45%)</title><rect x="15.0930%" y="117" width="0.4489%" height="15" fill="rgb(238,131,9)" fg:x="4842" fg:w="144"/><text x="15.3430%" y="127.50"></text></g><g><title>onoro::canonicalize::board_symm_state (27 samples, 0.08%)</title><rect x="15.4577%" y="101" width="0.0842%" height="15" fill="rgb(211,50,8)" fg:x="4959" fg:w="27"/><text x="15.7077%" y="111.50"></text></g><g><title>__sigtramp (27 samples, 0.08%)</title><rect x="15.4577%" y="85" width="0.0842%" height="15" fill="rgb(245,182,24)" fg:x="4959" fg:w="27"/><text x="15.7077%" y="95.50"></text></g><g><title>_perf_signal_handler (27 samples, 0.08%)</title><rect x="15.4577%" y="69" width="0.0842%" height="15" fill="rgb(242,14,37)" fg:x="4959" fg:w="27"/><text x="15.7077%" y="79.50"></text></g><g><title>__sigtramp (47 samples, 0.15%)</title><rect x="15.5419%" y="117" width="0.1465%" height="15" fill="rgb(246,228,12)" fg:x="4986" fg:w="47"/><text x="15.7919%" y="127.50"></text></g><g><title>_perf_signal_handler (47 samples, 0.15%)</title><rect x="15.5419%" y="101" width="0.1465%" height="15" fill="rgb(213,55,15)" fg:x="4986" fg:w="47"/><text x="15.7919%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.07%)</title><rect x="15.6884%" y="117" width="0.0748%" height="15" fill="rgb(209,9,3)" fg:x="5033" fg:w="24"/><text x="15.9384%" y="127.50"></text></g><g><title>__sigtramp (24 samples, 0.07%)</title><rect x="15.6884%" y="101" width="0.0748%" height="15" fill="rgb(230,59,30)" fg:x="5033" fg:w="24"/><text x="15.9384%" y="111.50"></text></g><g><title>_perf_signal_handler (24 samples, 0.07%)</title><rect x="15.6884%" y="85" width="0.0748%" height="15" fill="rgb(209,121,21)" fg:x="5033" fg:w="24"/><text x="15.9384%" y="95.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (25 samples, 0.08%)</title><rect x="15.7695%" y="117" width="0.0779%" height="15" fill="rgb(220,109,13)" fg:x="5059" fg:w="25"/><text x="16.0195%" y="127.50"></text></g><g><title>__sigtramp (25 samples, 0.08%)</title><rect x="15.7695%" y="101" width="0.0779%" height="15" fill="rgb(232,18,1)" fg:x="5059" fg:w="25"/><text x="16.0195%" y="111.50"></text></g><g><title>_perf_signal_handler (25 samples, 0.08%)</title><rect x="15.7695%" y="85" width="0.0779%" height="15" fill="rgb(215,41,42)" fg:x="5059" fg:w="25"/><text x="16.0195%" y="95.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (6 samples, 0.02%)</title><rect x="15.8505%" y="117" width="0.0187%" height="15" fill="rgb(224,123,36)" fg:x="5085" fg:w="6"/><text x="16.1005%" y="127.50"></text></g><g><title>__sigtramp (6 samples, 0.02%)</title><rect x="15.8505%" y="101" width="0.0187%" height="15" fill="rgb(240,125,3)" fg:x="5085" fg:w="6"/><text x="16.1005%" y="111.50"></text></g><g><title>_perf_signal_handler (6 samples, 0.02%)</title><rect x="15.8505%" y="85" width="0.0187%" height="15" fill="rgb(205,98,50)" fg:x="5085" fg:w="6"/><text x="16.1005%" y="95.50"></text></g><g><title>__sigtramp (17 samples, 0.05%)</title><rect x="15.8692%" y="101" width="0.0530%" height="15" fill="rgb(205,185,37)" fg:x="5091" fg:w="17"/><text x="16.1192%" y="111.50"></text></g><g><title>_perf_signal_handler (17 samples, 0.05%)</title><rect x="15.8692%" y="85" width="0.0530%" height="15" fill="rgb(238,207,15)" fg:x="5091" fg:w="17"/><text x="16.1192%" y="95.50"></text></g><g><title>onoro::canonicalize::board_symm_state (12 samples, 0.04%)</title><rect x="15.9222%" y="101" width="0.0374%" height="15" fill="rgb(213,199,42)" fg:x="5108" fg:w="12"/><text x="16.1722%" y="111.50"></text></g><g><title>__sigtramp (12 samples, 0.04%)</title><rect x="15.9222%" y="85" width="0.0374%" height="15" fill="rgb(235,201,11)" fg:x="5108" fg:w="12"/><text x="16.1722%" y="95.50"></text></g><g><title>_perf_signal_handler (12 samples, 0.04%)</title><rect x="15.9222%" y="69" width="0.0374%" height="15" fill="rgb(207,46,11)" fg:x="5108" fg:w="12"/><text x="16.1722%" y="79.50"></text></g><g><title>onoro::onoro_view::OnoroView&lt;_,_,_&gt;::new (41 samples, 0.13%)</title><rect x="15.8692%" y="117" width="0.1278%" height="15" fill="rgb(241,35,35)" fg:x="5091" fg:w="41"/><text x="16.1192%" y="127.50"></text></g><g><title>onoro::hash::HashTable&lt;_,_,G&gt;::hash (12 samples, 0.04%)</title><rect x="15.9596%" y="101" width="0.0374%" height="15" fill="rgb(243,32,47)" fg:x="5120" fg:w="12"/><text x="16.2096%" y="111.50"></text></g><g><title>__sigtramp (12 samples, 0.04%)</title><rect x="15.9596%" y="85" width="0.0374%" height="15" fill="rgb(247,202,23)" fg:x="5120" fg:w="12"/><text x="16.2096%" y="95.50"></text></g><g><title>_perf_signal_handler (12 samples, 0.04%)</title><rect x="15.9596%" y="69" width="0.0374%" height="15" fill="rgb(219,102,11)" fg:x="5120" fg:w="12"/><text x="16.2096%" y="79.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (362 samples, 1.13%)</title><rect x="15.9970%" y="101" width="1.1284%" height="15" fill="rgb(243,110,44)" fg:x="5132" fg:w="362"/><text x="16.2470%" y="111.50"></text></g><g><title>__sigtramp (362 samples, 1.13%)</title><rect x="15.9970%" y="85" width="1.1284%" height="15" fill="rgb(222,74,54)" fg:x="5132" fg:w="362"/><text x="16.2470%" y="95.50"></text></g><g><title>_perf_signal_handler (362 samples, 1.13%)</title><rect x="15.9970%" y="69" width="1.1284%" height="15" fill="rgb(216,99,12)" fg:x="5132" fg:w="362"/><text x="16.2470%" y="79.50"></text></g><g><title>__sigtramp (1,128 samples, 3.52%)</title><rect x="17.1254%" y="85" width="3.5161%" height="15" fill="rgb(226,22,26)" fg:x="5494" fg:w="1128"/><text x="17.3754%" y="95.50">__s..</text></g><g><title>_perf_signal_handler (1,128 samples, 3.52%)</title><rect x="17.1254%" y="69" width="3.5161%" height="15" fill="rgb(217,163,10)" fg:x="5494" fg:w="1128"/><text x="17.3754%" y="79.50">_pe..</text></g><g><title>&lt;onoro::onoro_view::OnoroView&lt;_,_,_&gt; as core::cmp::PartialEq&gt;::eq (1,371 samples, 4.27%)</title><rect x="17.1254%" y="101" width="4.2736%" height="15" fill="rgb(213,25,53)" fg:x="5494" fg:w="1371"/><text x="17.3754%" y="111.50">&lt;onor..</text></g><g><title>onoro::canonicalize::board_symm_state (243 samples, 0.76%)</title><rect x="20.6415%" y="85" width="0.7575%" height="15" fill="rgb(252,105,26)" fg:x="6622" fg:w="243"/><text x="20.8915%" y="95.50"></text></g><g><title>__sigtramp (243 samples, 0.76%)</title><rect x="20.6415%" y="69" width="0.7575%" height="15" fill="rgb(220,39,43)" fg:x="6622" fg:w="243"/><text x="20.8915%" y="79.50"></text></g><g><title>_perf_signal_handler (243 samples, 0.76%)</title><rect x="20.6415%" y="53" width="0.7575%" height="15" fill="rgb(229,68,48)" fg:x="6622" fg:w="243"/><text x="20.8915%" y="63.50"></text></g><g><title>__sigtramp (394 samples, 1.23%)</title><rect x="21.3990%" y="101" width="1.2281%" height="15" fill="rgb(252,8,32)" fg:x="6865" fg:w="394"/><text x="21.6490%" y="111.50"></text></g><g><title>_perf_signal_handler (394 samples, 1.23%)</title><rect x="21.3990%" y="85" width="1.2281%" height="15" fill="rgb(223,20,43)" fg:x="6865" fg:w="394"/><text x="21.6490%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (165 samples, 0.51%)</title><rect x="22.6271%" y="101" width="0.5143%" height="15" fill="rgb(229,81,49)" fg:x="7259" fg:w="165"/><text x="22.8771%" y="111.50"></text></g><g><title>__sigtramp (165 samples, 0.51%)</title><rect x="22.6271%" y="85" width="0.5143%" height="15" fill="rgb(236,28,36)" fg:x="7259" fg:w="165"/><text x="22.8771%" y="95.50"></text></g><g><title>_perf_signal_handler (165 samples, 0.51%)</title><rect x="22.6271%" y="69" width="0.5143%" height="15" fill="rgb(249,185,26)" fg:x="7259" fg:w="165"/><text x="22.8771%" y="79.50"></text></g><g><title>onoro::canonicalize::board_symm_state (11 samples, 0.03%)</title><rect x="23.1414%" y="101" width="0.0343%" height="15" fill="rgb(249,174,33)" fg:x="7424" fg:w="11"/><text x="23.3914%" y="111.50"></text></g><g><title>__sigtramp (11 samples, 0.03%)</title><rect x="23.1414%" y="85" width="0.0343%" height="15" fill="rgb(233,201,37)" fg:x="7424" fg:w="11"/><text x="23.3914%" y="95.50"></text></g><g><title>_perf_signal_handler (11 samples, 0.03%)</title><rect x="23.1414%" y="69" width="0.0343%" height="15" fill="rgb(221,78,26)" fg:x="7424" fg:w="11"/><text x="23.3914%" y="79.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (152 samples, 0.47%)</title><rect x="23.1757%" y="101" width="0.4738%" height="15" fill="rgb(250,127,30)" fg:x="7435" fg:w="152"/><text x="23.4257%" y="111.50"></text></g><g><title>__sigtramp (152 samples, 0.47%)</title><rect x="23.1757%" y="85" width="0.4738%" height="15" fill="rgb(230,49,44)" fg:x="7435" fg:w="152"/><text x="23.4257%" y="95.50"></text></g><g><title>_perf_signal_handler (152 samples, 0.47%)</title><rect x="23.1757%" y="69" width="0.4738%" height="15" fill="rgb(229,67,23)" fg:x="7435" fg:w="152"/><text x="23.4257%" y="79.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::each_move (12 samples, 0.04%)</title><rect x="23.6495%" y="101" width="0.0374%" height="15" fill="rgb(249,83,47)" fg:x="7587" fg:w="12"/><text x="23.8995%" y="111.50"></text></g><g><title>__sigtramp (12 samples, 0.04%)</title><rect x="23.6495%" y="85" width="0.0374%" height="15" fill="rgb(215,43,3)" fg:x="7587" fg:w="12"/><text x="23.8995%" y="95.50"></text></g><g><title>_perf_signal_handler (12 samples, 0.04%)</title><rect x="23.6495%" y="69" width="0.0374%" height="15" fill="rgb(238,154,13)" fg:x="7587" fg:w="12"/><text x="23.8995%" y="79.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (59 samples, 0.18%)</title><rect x="23.6869%" y="101" width="0.1839%" height="15" fill="rgb(219,56,2)" fg:x="7599" fg:w="59"/><text x="23.9369%" y="111.50"></text></g><g><title>__sigtramp (59 samples, 0.18%)</title><rect x="23.6869%" y="85" width="0.1839%" height="15" fill="rgb(233,0,4)" fg:x="7599" fg:w="59"/><text x="23.9369%" y="95.50"></text></g><g><title>_perf_signal_handler (59 samples, 0.18%)</title><rect x="23.6869%" y="69" width="0.1839%" height="15" fill="rgb(235,30,7)" fg:x="7599" fg:w="59"/><text x="23.9369%" y="79.50"></text></g><g><title>__sigtramp (179 samples, 0.56%)</title><rect x="23.8708%" y="85" width="0.5580%" height="15" fill="rgb(250,79,13)" fg:x="7658" fg:w="179"/><text x="24.1208%" y="95.50"></text></g><g><title>_perf_signal_handler (179 samples, 0.56%)</title><rect x="23.8708%" y="69" width="0.5580%" height="15" fill="rgb(211,146,34)" fg:x="7658" fg:w="179"/><text x="24.1208%" y="79.50"></text></g><g><title>onoro::canonicalize::board_symm_state (105 samples, 0.33%)</title><rect x="24.4288%" y="85" width="0.3273%" height="15" fill="rgb(228,22,38)" fg:x="7837" fg:w="105"/><text x="24.6788%" y="95.50"></text></g><g><title>__sigtramp (105 samples, 0.33%)</title><rect x="24.4288%" y="69" width="0.3273%" height="15" fill="rgb(235,168,5)" fg:x="7837" fg:w="105"/><text x="24.6788%" y="79.50"></text></g><g><title>_perf_signal_handler (105 samples, 0.33%)</title><rect x="24.4288%" y="53" width="0.3273%" height="15" fill="rgb(221,155,16)" fg:x="7837" fg:w="105"/><text x="24.6788%" y="63.50"></text></g><g><title>onoro::onoro_view::OnoroView&lt;_,_,_&gt;::new (371 samples, 1.16%)</title><rect x="23.8708%" y="101" width="1.1564%" height="15" fill="rgb(215,215,53)" fg:x="7658" fg:w="371"/><text x="24.1208%" y="111.50"></text></g><g><title>onoro::hash::HashTable&lt;_,_,G&gt;::hash (87 samples, 0.27%)</title><rect x="24.7561%" y="85" width="0.2712%" height="15" fill="rgb(223,4,10)" fg:x="7942" fg:w="87"/><text x="25.0061%" y="95.50"></text></g><g><title>__sigtramp (87 samples, 0.27%)</title><rect x="24.7561%" y="69" width="0.2712%" height="15" fill="rgb(234,103,6)" fg:x="7942" fg:w="87"/><text x="25.0061%" y="79.50"></text></g><g><title>_perf_signal_handler (87 samples, 0.27%)</title><rect x="24.7561%" y="53" width="0.2712%" height="15" fill="rgb(227,97,0)" fg:x="7942" fg:w="87"/><text x="25.0061%" y="63.50"></text></g><g><title>&lt;onoro::onoro::MoveIterator&lt;_,_,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,374 samples, 10.52%)</title><rect x="25.0273%" y="85" width="10.5171%" height="15" fill="rgb(234,150,53)" fg:x="8029" fg:w="3374"/><text x="25.2773%" y="95.50">&lt;onoro::onoro::..</text></g><g><title>__sigtramp (3,374 samples, 10.52%)</title><rect x="25.0273%" y="69" width="10.5171%" height="15" fill="rgb(228,201,54)" fg:x="8029" fg:w="3374"/><text x="25.2773%" y="79.50">__sigtramp</text></g><g><title>_perf_signal_handler (3,374 samples, 10.52%)</title><rect x="25.0273%" y="53" width="10.5171%" height="15" fill="rgb(222,22,37)" fg:x="8029" fg:w="3374"/><text x="25.2773%" y="63.50">_perf_signal_ha..</text></g><g><title>__sigtramp (8,928 samples, 27.83%)</title><rect x="35.5444%" y="69" width="27.8296%" height="15" fill="rgb(237,53,32)" fg:x="11403" fg:w="8928"/><text x="35.7944%" y="79.50">__sigtramp</text></g><g><title>_perf_signal_handler (8,928 samples, 27.83%)</title><rect x="35.5444%" y="53" width="27.8296%" height="15" fill="rgb(233,25,53)" fg:x="11403" fg:w="8928"/><text x="35.7944%" y="63.50">_perf_signal_handler</text></g><g><title>&lt;onoro::onoro_view::OnoroView&lt;_,_,_&gt; as core::cmp::PartialEq&gt;::eq (10,940 samples, 34.10%)</title><rect x="35.5444%" y="85" width="34.1012%" height="15" fill="rgb(210,40,34)" fg:x="11403" fg:w="10940"/><text x="35.7944%" y="95.50">&lt;onoro::onoro_view::OnoroView&lt;_,_,_&gt; as core::cmp::Part..</text></g><g><title>onoro::canonicalize::board_symm_state (2,012 samples, 6.27%)</title><rect x="63.3740%" y="69" width="6.2716%" height="15" fill="rgb(241,220,44)" fg:x="20331" fg:w="2012"/><text x="63.6240%" y="79.50">onoro::c..</text></g><g><title>__sigtramp (2,012 samples, 6.27%)</title><rect x="63.3740%" y="53" width="6.2716%" height="15" fill="rgb(235,28,35)" fg:x="20331" fg:w="2012"/><text x="63.6240%" y="63.50">__sigtra..</text></g><g><title>_perf_signal_handler (2,012 samples, 6.27%)</title><rect x="63.3740%" y="37" width="6.2716%" height="15" fill="rgb(210,56,17)" fg:x="20331" fg:w="2012"/><text x="63.6240%" y="47.50">_perf_si..</text></g><g><title>__sigtramp (3,239 samples, 10.10%)</title><rect x="69.6456%" y="85" width="10.0963%" height="15" fill="rgb(224,130,29)" fg:x="22343" fg:w="3239"/><text x="69.8956%" y="95.50">__sigtramp</text></g><g><title>_perf_signal_handler (3,239 samples, 10.10%)</title><rect x="69.6456%" y="69" width="10.0963%" height="15" fill="rgb(235,212,8)" fg:x="22343" fg:w="3239"/><text x="69.8956%" y="79.50">_perf_signal_ha..</text></g><g><title>core::hash::BuildHasher::hash_one (995 samples, 3.10%)</title><rect x="79.7419%" y="85" width="3.1015%" height="15" fill="rgb(223,33,50)" fg:x="25582" fg:w="995"/><text x="79.9919%" y="95.50">cor..</text></g><g><title>__sigtramp (995 samples, 3.10%)</title><rect x="79.7419%" y="69" width="3.1015%" height="15" fill="rgb(219,149,13)" fg:x="25582" fg:w="995"/><text x="79.9919%" y="79.50">__s..</text></g><g><title>_perf_signal_handler (995 samples, 3.10%)</title><rect x="79.7419%" y="53" width="3.1015%" height="15" fill="rgb(250,156,29)" fg:x="25582" fg:w="995"/><text x="79.9919%" y="63.50">_pe..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.13%)</title><rect x="82.8434%" y="85" width="0.1278%" height="15" fill="rgb(216,193,19)" fg:x="26577" fg:w="41"/><text x="83.0934%" y="95.50"></text></g><g><title>__sigtramp (41 samples, 0.13%)</title><rect x="82.8434%" y="69" width="0.1278%" height="15" fill="rgb(216,135,14)" fg:x="26577" fg:w="41"/><text x="83.0934%" y="79.50"></text></g><g><title>_perf_signal_handler (41 samples, 0.13%)</title><rect x="82.8434%" y="53" width="0.1278%" height="15" fill="rgb(241,47,5)" fg:x="26577" fg:w="41"/><text x="83.0934%" y="63.50"></text></g><g><title>onoro::canonicalize::board_symm_state (72 samples, 0.22%)</title><rect x="82.9712%" y="85" width="0.2244%" height="15" fill="rgb(233,42,35)" fg:x="26618" fg:w="72"/><text x="83.2212%" y="95.50"></text></g><g><title>__sigtramp (72 samples, 0.22%)</title><rect x="82.9712%" y="69" width="0.2244%" height="15" fill="rgb(231,13,6)" fg:x="26618" fg:w="72"/><text x="83.2212%" y="79.50"></text></g><g><title>_perf_signal_handler (72 samples, 0.22%)</title><rect x="82.9712%" y="53" width="0.2244%" height="15" fill="rgb(207,181,40)" fg:x="26618" fg:w="72"/><text x="83.2212%" y="63.50"></text></g><g><title>onoro::hash::HashTable&lt;_,_,G&gt;::hash (4 samples, 0.01%)</title><rect x="83.1957%" y="85" width="0.0125%" height="15" fill="rgb(254,173,49)" fg:x="26690" fg:w="4"/><text x="83.4457%" y="95.50"></text></g><g><title>__sigtramp (4 samples, 0.01%)</title><rect x="83.1957%" y="69" width="0.0125%" height="15" fill="rgb(221,1,38)" fg:x="26690" fg:w="4"/><text x="83.4457%" y="79.50"></text></g><g><title>_perf_signal_handler (4 samples, 0.01%)</title><rect x="83.1957%" y="53" width="0.0125%" height="15" fill="rgb(206,124,46)" fg:x="26690" fg:w="4"/><text x="83.4457%" y="63.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::adjust_to_new_pawn_and_check_win (1,609 samples, 5.02%)</title><rect x="83.2081%" y="85" width="5.0154%" height="15" fill="rgb(249,21,11)" fg:x="26694" fg:w="1609"/><text x="83.4581%" y="95.50">onoro:..</text></g><g><title>__sigtramp (1,609 samples, 5.02%)</title><rect x="83.2081%" y="69" width="5.0154%" height="15" fill="rgb(222,201,40)" fg:x="26694" fg:w="1609"/><text x="83.4581%" y="79.50">__sigt..</text></g><g><title>_perf_signal_handler (1,609 samples, 5.02%)</title><rect x="83.2081%" y="53" width="5.0154%" height="15" fill="rgb(235,61,29)" fg:x="26694" fg:w="1609"/><text x="83.4581%" y="63.50">_perf_..</text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::each_move (50 samples, 0.16%)</title><rect x="88.2236%" y="85" width="0.1559%" height="15" fill="rgb(219,207,3)" fg:x="28303" fg:w="50"/><text x="88.4736%" y="95.50"></text></g><g><title>__sigtramp (50 samples, 0.16%)</title><rect x="88.2236%" y="69" width="0.1559%" height="15" fill="rgb(222,56,46)" fg:x="28303" fg:w="50"/><text x="88.4736%" y="79.50"></text></g><g><title>_perf_signal_handler (50 samples, 0.16%)</title><rect x="88.2236%" y="53" width="0.1559%" height="15" fill="rgb(239,76,54)" fg:x="28303" fg:w="50"/><text x="88.4736%" y="63.50"></text></g><g><title>onoro::onoro::Onoro&lt;_,_,_&gt;::make_move_unchecked (280 samples, 0.87%)</title><rect x="88.3794%" y="85" width="0.8728%" height="15" fill="rgb(231,124,27)" fg:x="28353" fg:w="280"/><text x="88.6294%" y="95.50"></text></g><g><title>__sigtramp (280 samples, 0.87%)</title><rect x="88.3794%" y="69" width="0.8728%" height="15" fill="rgb(249,195,6)" fg:x="28353" fg:w="280"/><text x="88.6294%" y="79.50"></text></g><g><title>_perf_signal_handler (280 samples, 0.87%)</title><rect x="88.3794%" y="53" width="0.8728%" height="15" fill="rgb(237,174,47)" fg:x="28353" fg:w="280"/><text x="88.6294%" y="63.50"></text></g><g><title>__sigtramp (1,538 samples, 4.79%)</title><rect x="89.2522%" y="69" width="4.7941%" height="15" fill="rgb(206,201,31)" fg:x="28633" fg:w="1538"/><text x="89.5022%" y="79.50">__sigt..</text></g><g><title>_perf_signal_handler (1,538 samples, 4.79%)</title><rect x="89.2522%" y="53" width="4.7941%" height="15" fill="rgb(231,57,52)" fg:x="28633" fg:w="1538"/><text x="89.5022%" y="63.50">_perf_..</text></g><g><title>onoro::canonicalize::board_symm_state (1,043 samples, 3.25%)</title><rect x="94.0463%" y="69" width="3.2511%" height="15" fill="rgb(248,177,22)" fg:x="30171" fg:w="1043"/><text x="94.2963%" y="79.50">ono..</text></g><g><title>__sigtramp (1,043 samples, 3.25%)</title><rect x="94.0463%" y="53" width="3.2511%" height="15" fill="rgb(215,211,37)" fg:x="30171" fg:w="1043"/><text x="94.2963%" y="63.50">__s..</text></g><g><title>_perf_signal_handler (1,043 samples, 3.25%)</title><rect x="94.0463%" y="37" width="3.2511%" height="15" fill="rgb(241,128,51)" fg:x="30171" fg:w="1043"/><text x="94.2963%" y="47.50">_pe..</text></g><g><title>onoro::hash::HashTable&lt;_,_,G&gt;::hash (798 samples, 2.49%)</title><rect x="97.2975%" y="69" width="2.4875%" height="15" fill="rgb(227,165,31)" fg:x="31214" fg:w="798"/><text x="97.5475%" y="79.50">on..</text></g><g><title>__sigtramp (798 samples, 2.49%)</title><rect x="97.2975%" y="53" width="2.4875%" height="15" fill="rgb(228,167,24)" fg:x="31214" fg:w="798"/><text x="97.5475%" y="63.50">__..</text></g><g><title>_perf_signal_handler (798 samples, 2.49%)</title><rect x="97.2975%" y="37" width="2.4875%" height="15" fill="rgb(228,143,12)" fg:x="31214" fg:w="798"/><text x="97.5475%" y="47.50">_p..</text></g><g><title>onoro::onoro_view::OnoroView&lt;_,_,_&gt;::new (3,391 samples, 10.57%)</title><rect x="89.2522%" y="85" width="10.5701%" height="15" fill="rgb(249,149,8)" fg:x="28633" fg:w="3391"/><text x="89.5022%" y="95.50">onoro::onoro_vi..</text></g><g><title>onoro::tile_hash::HashGroup&lt;algebra::group::types::dihedral::Dihedral&lt;6_u16&gt;&gt;::apply (12 samples, 0.04%)</title><rect x="99.7849%" y="69" width="0.0374%" height="15" fill="rgb(243,35,44)" fg:x="32012" fg:w="12"/><text x="100.0349%" y="79.50"></text></g><g><title>__sigtramp (12 samples, 0.04%)</title><rect x="99.7849%" y="53" width="0.0374%" height="15" fill="rgb(246,89,9)" fg:x="32012" fg:w="12"/><text x="100.0349%" y="63.50"></text></g><g><title>_perf_signal_handler (12 samples, 0.04%)</title><rect x="99.7849%" y="37" width="0.0374%" height="15" fill="rgb(233,213,13)" fg:x="32012" fg:w="12"/><text x="100.0349%" y="47.50"></text></g><g><title>onoro::tile_hash::HashGroup&lt;algebra::group::types::dihedral::Dihedral&lt;3_u16&gt;&gt;::apply (5 samples, 0.02%)</title><rect x="99.8223%" y="85" width="0.0156%" height="15" fill="rgb(233,141,41)" fg:x="32024" fg:w="5"/><text x="100.0723%" y="95.50"></text></g><g><title>__sigtramp (5 samples, 0.02%)</title><rect x="99.8223%" y="69" width="0.0156%" height="15" fill="rgb(239,167,4)" fg:x="32024" fg:w="5"/><text x="100.0723%" y="79.50"></text></g><g><title>_perf_signal_handler (5 samples, 0.02%)</title><rect x="99.8223%" y="53" width="0.0156%" height="15" fill="rgb(209,217,16)" fg:x="32024" fg:w="5"/><text x="100.0723%" y="63.50"></text></g><g><title>onoro_rs::find_best_move_table (27,338 samples, 85.22%)</title><rect x="14.7813%" y="229" width="85.2155%" height="15" fill="rgb(219,88,35)" fg:x="4742" fg:w="27338"/><text x="15.0313%" y="239.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (27,338 samples, 85.22%)</title><rect x="14.7813%" y="213" width="85.2155%" height="15" fill="rgb(220,193,23)" fg:x="4742" fg:w="27338"/><text x="15.0313%" y="223.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (27,338 samples, 85.22%)</title><rect x="14.7813%" y="197" width="85.2155%" height="15" fill="rgb(230,90,52)" fg:x="4742" fg:w="27338"/><text x="15.0313%" y="207.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (27,338 samples, 85.22%)</title><rect x="14.7813%" y="181" width="85.2155%" height="15" fill="rgb(252,106,19)" fg:x="4742" fg:w="27338"/><text x="15.0313%" y="191.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (27,336 samples, 85.21%)</title><rect x="14.7876%" y="165" width="85.2093%" height="15" fill="rgb(206,74,20)" fg:x="4744" fg:w="27336"/><text x="15.0376%" y="175.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (27,334 samples, 85.20%)</title><rect x="14.7938%" y="149" width="85.2031%" height="15" fill="rgb(230,138,44)" fg:x="4746" fg:w="27334"/><text x="15.0438%" y="159.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (27,285 samples, 85.05%)</title><rect x="14.9465%" y="133" width="85.0503%" height="15" fill="rgb(235,182,43)" fg:x="4795" fg:w="27285"/><text x="15.1965%" y="143.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (26,948 samples, 84.00%)</title><rect x="15.9970%" y="117" width="83.9999%" height="15" fill="rgb(242,16,51)" fg:x="5132" fg:w="26948"/><text x="16.2470%" y="127.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (24,051 samples, 74.97%)</title><rect x="25.0273%" y="101" width="74.9696%" height="15" fill="rgb(248,9,4)" fg:x="8029" fg:w="24051"/><text x="25.2773%" y="111.50">onoro_rs::find_best_move_table</text></g><g><title>onoro_rs::find_best_move_table (49 samples, 0.15%)</title><rect x="99.8441%" y="85" width="0.1527%" height="15" fill="rgb(210,31,22)" fg:x="32031" fg:w="49"/><text x="100.0941%" y="95.50"></text></g><g><title>__sigtramp (49 samples, 0.15%)</title><rect x="99.8441%" y="69" width="0.1527%" height="15" fill="rgb(239,54,39)" fg:x="32031" fg:w="49"/><text x="100.0941%" y="79.50"></text></g><g><title>_perf_signal_handler (49 samples, 0.15%)</title><rect x="99.8441%" y="53" width="0.1527%" height="15" fill="rgb(230,99,41)" fg:x="32031" fg:w="49"/><text x="100.0941%" y="63.50"></text></g><g><title>all (32,081 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="32081"/><text x="0.2500%" y="351.50"></text></g><g><title>4564950464 (32,081 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="32081"/><text x="0.2500%" y="335.50">4564950464</text></g><g><title>_main (32,071 samples, 99.97%)</title><rect x="0.0312%" y="309" width="99.9688%" height="15" fill="rgb(215,133,35)" fg:x="10" fg:w="32071"/><text x="0.2812%" y="319.50">_main</text></g><g><title>std::rt::lang_start_internal (32,071 samples, 99.97%)</title><rect x="0.0312%" y="293" width="99.9688%" height="15" fill="rgb(213,28,5)" fg:x="10" fg:w="32071"/><text x="0.2812%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (32,071 samples, 99.97%)</title><rect x="0.0312%" y="277" width="99.9688%" height="15" fill="rgb(215,77,49)" fg:x="10" fg:w="32071"/><text x="0.2812%" y="287.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (32,071 samples, 99.97%)</title><rect x="0.0312%" y="261" width="99.9688%" height="15" fill="rgb(248,100,22)" fg:x="10" fg:w="32071"/><text x="0.2812%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>onoro_rs::main (32,071 samples, 99.97%)</title><rect x="0.0312%" y="245" width="99.9688%" height="15" fill="rgb(208,67,9)" fg:x="10" fg:w="32071"/><text x="0.2812%" y="255.50">onoro_rs::main</text></g></svg></svg>